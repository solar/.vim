filetype off
if has('vim_starting')
    set rtp+=$HOME/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

if neobundle#load_cache()
    if has('nvim')
        NeoBundle 'Shougo/deoplete.nvim'
    endif

    NeoBundleLazy 'kana/vim-smartword', {
                \   'autoload' : {
                \       'mappings' : [
                \           '<Plug>(smartword-'
                \       ]
                \   }
                \ }

    NeoBundleLazy 'Shougo/vimfiler', {
              \ 'depends' : 'Shougo/unite.vim',
              \ 'autoload' : {
              \    'commands' : [{ 'name' : 'VimFiler',
              \                    'complete' : 'customlist,vimfiler#complete' },
              \                  'VimFilerExplorer',
              \                  'Edit', 'Read', 'Source', 'Write'],
              \    'mappings' : '<Plug>',
              \    'explorer' : 1,
              \ }
              \ }

    NeoBundleLazy 'Shougo/unite.vim', {
                \ 'autoload': { 'commands': [ 'Unite' ] }
                \ }

    NeoBundle 'basyura/TweetVim', { 'depends' :
                \ ['basyura/twibill.vim', 'tyru/open-browser.vim'] }

    NeoBundle 'rhysd/vim-operator-surround', { 'depends': 'kana/vim-operator-user' }

    NeoBundle 'Align'
    NeoBundle 'easymotion/vim-easymotion'

    if !has('nvim')
        NeoBundle 'Shougo/neocomplete'
        NeoBundle 'Shougo/neosnippet'
        NeoBundle 'Shougo/neosnippet-snippets'
    endif

    NeoBundle 'Shougo/neomru.vim'
    NeoBundle 'Shougo/unite-outline'
    NeoBundle 'Shougo/vimproc', {
                \ 'build': {
                \   'cygwin': 'make -f make_cygwin.mak',
                \   'mac': 'make -f make_mac.mak',
                \   'unix': 'make -f make_unix.mak',
                \ },
                \}
    " \   'windows': 'make -f make_mingw32.mak',
    NeoBundle 'itchyny/lightline.vim'
    NeoBundle 'kana/vim-textobj-indent', { 'depends': 'kana/vim-textobj-user' }
    NeoBundle 'thinca/vim-textobj-between', { 'depends': 'kana/vim-textobj-user' }
    NeoBundle 'rhysd/vim-textobj-anyblock', { 'depends': 'kana/vim-textobj-user' }
    NeoBundle 'lambdalisue/unite-grep-vcs'
    NeoBundle 'othree/eregex.vim'
    NeoBundle 'scrooloose/nerdcommenter'
    NeoBundleLazy 'sgur/unite-qf', {
                \   'depends' : 'Shougo/unite.vim',
                \   'autoload': { 'commands': [ 'Unite' ] }
                \ }
    NeoBundleLazy 'tacroe/unite-mark', {
                \   'depends' : 'Shougo/unite.vim',
                \   'autoload': { 'commands': [ 'Unite' ] }
                \ }
    NeoBundle 'thinca/vim-localrc'
    NeoBundle 'thinca/vim-qfreplace'
    NeoBundle 'tpope/vim-fugitive'
    NeoBundle 'tpope/vim-repeat'

    NeoBundleLazy 'tsukkee/unite-help', {
                \   'depends' : 'Shougo/unite.vim',
                \   'autoload': { 'commands': [ 'Unite' ] }
                \ }
    NeoBundleLazy 'tsukkee/unite-tag', {
                \   'depends' : 'Shougo/unite.vim',
                \   'autoload': { 'commands': [ 'Unite' ] }
                \ }

    NeoBundle 'xmledit'
    NeoBundle 'sgur/unite-everything'
    NeoBundle 'tyru/open-browser.vim'
    NeoBundle 'kannokanno/previm'

    " filetype plugins
    NeoBundle 'derekwyatt/vim-scala'
    NeoBundle 'groovy.vim'
    NeoBundle 'haproxy'
    NeoBundle 'nginx.vim'
    NeoBundle 'paulyg/Vim-PHP-Stuff'
    NeoBundle 'python.vim'
    NeoBundle 'slim-template/vim-slim'
    NeoBundle 'tfnico/vim-gradle'
    NeoBundle 'theevocater/thrift.vim'
    NeoBundle 'dotcloud/docker',
                \ {'rtp': '~/.vim/bundle/docker/contrib/syntax/vim'}
    NeoBundle 'fatih/vim-go'
    NeoBundle 'kchmck/vim-coffee-script'
    NeoBundle 'chase/vim-ansible-yaml'

    " colorschemes
    NeoBundle 'jonathanfilip/vim-lucius'
    NeoBundle 'nanotech/jellybeans.vim'
    NeoBundle 'w0ng/vim-hybrid'
    NeoBundle 'altercation/vim-colors-solarized'

    " Ensime
    NeoBundle 'ensime/ensime-vim'

    NeoBundleLocal $HOME/.vim/local

    NeoBundleSaveCache
endif

call neobundle#end()

filetype plugin indent on

NeoBundleCheck
